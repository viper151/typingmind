openapi: 3.0.3
info:
  title: TypingMind API Documentation
  version: 1.1.0
  description: "
    <h5 class='mt-8 mb-2'><b>API Hosts:</b></h5>
    <ol class='list-decimal mt-2'>
      <li>For US instances: <code>https://api.typingmind.com</code></li>
      <li>For EU instances: <code>https://api.eu.typingmind.com</code></li>
    </ol>
    <h5 class='mt-8 mb-2'><b>How to use the API:</b></h5>
    <ol class='list-decimal mt-2'>
      <li>Generate an API key by accessing the custom instance admin page (go to Integrations > API Integration).</li>
      <li>When making a request, include the API key in the request headers as <code>X-API-KEY</code>.</li>
    </ol>
  "

servers:
  - url: https://api.typingmind.com/api

tags:
  - name: Users V2
  - name: Groups
  - name: Roles
  - name: Characters
  - name: Chat
  - name: Chatlogs
  - name: Users

paths:
  /v2/users:
    get:
      operationId: getUsersV2
      tags:
        - Users V2
      summary: Get all users in your chat instance
      parameters:
        - in: query
          name: email
          schema:
            type: string
          description: Email of the user
          example: email%40example.com

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/UserV2'
        '401':
          description: Unauthorized (API Key is missing or invalid)

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

    post:
      operationId: addUserV2
      tags:
        - Users V2
      summary: Add a user to your chat instance
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: email@example.com
                groups:
                  type: array
                  items:
                    type: string
                  example: ['group-id-1', 'group-id-2']
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserV2'
        '401':
          description: Unauthorized (API Key is missing or invalid)

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

  /v2/users/{id}:
    get:
      operationId: getUserV2
      tags:
        - Users V2
      summary: Get user information by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the user
          example: 123456
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserV2'

        '401':
          description: Unauthorized (API Key is missing or invalid)

        '404':
          description: User Not Found

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

    delete:
      operationId: deleteUserV2
      tags:
        - Users V2
      summary: Remove a user from your chat instance
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the user
          example: 123456
      responses:
        '200':
          description: Successful

        '401':
          description: Unauthorized (API Key is missing or invalid)

        '404':
          description: User Not Found

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

    patch:
      operationId: updateUserV2
      tags:
        - Users V2
      summary: Update a user
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the user
          example: 123456
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                groups:
                  type: array
                  items:
                    type: string
                  example: ['group-id-1', 'group-id-2']
        required: true
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserV2'

        '401':
          description: Unauthorized (API Key is missing or invalid)

        '404':
          description: User Not Found

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

  /v2/groups:
    get:
      operationId: getGroups
      tags:
        - Groups
      summary: Get all groups in your chat instance

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Group'
        '401':
          description: Unauthorized (API Key is missing or invalid)

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

    post:
      operationId: addGroup
      tags:
        - Groups
      summary: Add a new group to your chat instance
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Marketing Department
                  required: true
                roles:
                  type: array
                  items:
                    type: string
                  example: ['role-id-1', 'role-id-2']
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupWithRoles'
        '401':
          description: Unauthorized (API Key is missing or invalid)

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

  /v2/groups/{id}:
    get:
      operationId: getGroup
      tags:
        - Groups
      summary: Get group information by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the group
          example: group-id
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupWithRoles'

        '401':
          description: Unauthorized (API Key is missing or invalid)

        '404':
          description: User Not Found

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

    patch:
      operationId: updateGroup
      tags:
        - Groups
      summary: Update a group
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the group
          example: group-id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - type: object
                  required: ['title']
                  properties:
                    title:
                      type: string
                      example: Marketing Department
                - type: object
                  required: ['roles']
                  properties:
                    roles:
                      type: array
                      items:
                        type: string
                      example: ['role-id-1', 'role-id-2']
                - type: object
                  required: ['title', 'roles']
                  properties:
                    title:
                      type: string
                      example: Marketing Department
                    roles:
                      type: array
                      items:
                        type: string
                      example: ['role-id-1', 'role-id-2']
        required: true
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupWithRoles'

        '401':
          description: Unauthorized (API Key is missing or invalid)

        '404':
          description: User Not Found

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

  /v2/roles:
    get:
      operationId: getRoles
      tags:
        - Roles
      summary: Get all roles in your chat instance

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Role'
        '401':
          description: Unauthorized (API Key is missing or invalid)

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

  /v1/users:
    post:
      operationId: addUser
      tags:
        - Users
      summary: Add a user to your chat instance
      deprecated: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: email@example.com
                tags:
                  type: array
                  items:
                    type: string
                  example: ['tag1', 'tag2']
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized (API Key is missing or invalid)

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

    get:
      operationId: getUsers
      tags:
        - Users
      summary: Get all users in your chat instance
      deprecated: true
      parameters:
        - in: query
          name: email
          schema:
            type: string
          description: Email of the user
          example: email%40example.com

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized (API Key is missing or invalid)

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

  /v1/users/{id}:
    get:
      operationId: getUser
      tags:
        - Users
      summary: Get user information by ID
      deprecated: true
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the user
          example: 123456
      responses:
        '200':
          description: Successful

        '401':
          description: Unauthorized (API Key is missing or invalid)

        '404':
          description: User Not Found

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

    delete:
      operationId: deleteUser
      tags:
        - Users
      summary: Remove a user from your chat instance
      deprecated: true
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the user
          example: 123456
      responses:
        '200':
          description: Successful

        '401':
          description: Unauthorized (API Key is missing or invalid)

        '404':
          description: User Not Found

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

    patch:
      operationId: updateUser
      tags:
        - Users
      summary: Update a user
      deprecated: true
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the user
          example: 123456
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  type: array
                  items:
                    type: string
                  example: ['tag1', 'tag2']
        required: true
      responses:
        '200':
          description: Successful

        '401':
          description: Unauthorized (API Key is missing or invalid)

        '404':
          description: User Not Found

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

  /v1/ai-characters:
    get:
      operationId: getCharacters
      tags:
        - Characters
      summary: Get all AI characters in your chat instance

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/Character'
        '401':
          description: Unauthorized (API Key is missing or invalid)

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

  /v1/chat/completions:
    post:
      operationId: createChatCompletions
      tags:
        - Chat
      summary: Create a model response for the given chat conversation

      requestBody:
        description: '<br>Find more information about the request body here:<br>
          <a href="https://platform.openai.com/docs/api-reference/chat/create" target="_blank">OpenAI API Reference</a><br>
          <a href="https://docs.anthropic.com/en/api/messages#body-model" target="_blank">Anthropic API Reference</a><br>
          <a href="https://ai.google.dev/gemini-api/docs/text-generation?lang=rest" target="_blank">Google Gemini API Reference</a><br><br>
          For additional configuration options, refer to the properties below:<br>'


        content:
          application/json:
            schema:
              type: object
              properties:
                activatedCharacterID:
                  type: string
                  description: AI character for this completion

              example:
                model: 'gpt-4o'
                stream: true
                messages:
                  [
                    {
                      'role': 'system',
                      'content': 'You are a helpful AI assistant.',
                    },
                    { 'role': 'user', 'content': 'hi' },
                  ]

        required: true

      responses:
        '200':
          description: OK

        '401':
          description: Unauthorized (API Key is missing or invalid)

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []

  /v1/chatlogs:
    get:
      operationId: getChatlogs
      tags:
        - Chatlogs
      summary: Get chat logs in your chat instance
      parameters:
        - in: query
          name: startUnixTime
          schema:
            type: number
          description: Unix time of the start time
          example: 1640995200
        - in: query
          name: endUnixTime
          schema:
            type: number
          description: Unix time of the end time
          example: 1640995200
        - in: query
          name: userID
          schema:
            type: number
          description: Filter by userID
          example: 123456
        - in: query
          name: limit
          schema:
            type: number
            example: 10
        - in: query
          name: offset
          schema:
            type: number
            example: 0

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/Chatlog'
        '401':
          description: Unauthorized (API Key is missing or invalid)

        '500':
          description: Internal Server Error

      security:
        - ApiKeyAuth: []


components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: 123456
        email:
          type: string
          example: email@example.com
        createdAt:
          type: string
        tags:
          type: array
          items:
            type: string
          example: ['tag1', 'tag2']
    UserV2:
      type: object
      properties:
        id:
          type: string
          example: 123456
        email:
          type: string
          example: email@example.com
        createdAt:
          type: string
        groups:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
            example: [{
              id: 'group-id-1',
              name: 'Group 1',
            }]
    Character:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        instruction:
          type: string
        defaultModel:
          type: string
        createdAt:
          type: string
    Chatlog:
      type: object
      properties:
        chatID:
          type: string
          example: 'U9H8EEJpLL'
        chatTitle:
          type: string
          example: 'Chat with an AI assistant'
        createdAt:
          type: string
          example: '2024-08-14T04:18:53.000Z'
        recordedAt:
          type: string
          example: '2024-08-14T04:18:53.000Z'
        conversationText:
          type: string
          example: 'User: Hello\n\nAssistant: Hi there!'
    Group:
      type: object
      properties:
        id:
          type: string
          example: 'group-id-1'
        title:
          type: string
          example: 'Marketing Department'
    GroupWithRoles:
      type: object
      properties:
        id:
          type: string
          example: 'group-id-1'
        title:
          type: string
          example: 'Marketing Department'
        roles:
          type: array
          items:
            type: string
          example: ['role-id-1', 'role-id-2']
    Role:
      type: object
      properties:
        id:
          type: string
          example: 'role-id-1'
        title:
          type: string
          example: 'Content Manager'
